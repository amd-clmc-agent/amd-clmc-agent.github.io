demo run with success.

log:

Computing BASELINE Forcing Term (w/o Obstacle) ...
Done
Building Feature Matrix from Demo Setting #1/7 ...
Building Feature Matrix from Demo Setting #2/7 ...
Building Feature Matrix from Demo Setting #3/7 ...
Building Feature Matrix from Demo Setting #4/7 ...
Building Feature Matrix from Demo Setting #5/7 ...
Building Feature Matrix from Demo Setting #6/7 ...
Building Feature Matrix from Demo Setting #7/7 ...
Done
Performing Moore-Penrose Inverse ...
Done
Logging Learning Obstacle Avoidance Data ...
Done
Initial Ct_mse (before Learning Control): 88.2238 33.5261 56.1207
Learning Control (LC) iteration 0:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 618.823 98.3378 562.522
LC iteration 0, mse (Ct_target-Ct_fit_new) = 645.432 134.529 630.274

Learning Control (LC) iteration 1:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =    1.1548 0.0895158   1.83733
LC iteration 1, mse (Ct_target-Ct_fit_new) = 224.111 82.9878 338.351

Learning Control (LC) iteration 2:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 116.664 20.4322 141.816
LC iteration 2, mse (Ct_target-Ct_fit_new) = 267.409  86.633 285.668

Learning Control (LC) iteration 3:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 33.0542 7.10813 183.315
LC iteration 3, mse (Ct_target-Ct_fit_new) = 184.715 66.3445  434.79

Learning Control (LC) iteration 4:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  2.78081 0.861361  15.3868
LC iteration 4, mse (Ct_target-Ct_fit_new) = 140.733 61.3375 257.779

Learning Control (LC) iteration 5:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 8.21444 3.83064 111.191
LC iteration 5, mse (Ct_target-Ct_fit_new) = 137.649 65.2379 304.706

Learning Control (LC) iteration 6:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 0.954245 0.415929  2.93901
LC iteration 6, mse (Ct_target-Ct_fit_new) = 137.467 62.8993 257.825

Learning Control (LC) iteration 7:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.25441 0.018397 0.465704
LC iteration 7, mse (Ct_target-Ct_fit_new) = 134.879 61.8233 231.886

Learning Control (LC) iteration 8:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.212917 0.0119664   1.50188
LC iteration 8, mse (Ct_target-Ct_fit_new) = 134.784 61.4154 224.018

Learning Control (LC) iteration 9:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.0362198 0.00473238   0.431954
LC iteration 9, mse (Ct_target-Ct_fit_new) = 134.681 61.1764 223.076

Learning Control (LC) iteration 10:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 0.00319585 0.00346121   0.162993
LC iteration 10, mse (Ct_target-Ct_fit_new) = 134.595 61.1018 223.009

Learning Control (LC) iteration 11:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.0115988 0.00221676   0.278142
LC iteration 11, mse (Ct_target-Ct_fit_new) = 134.599 61.0799 223.961

Learning Control (LC) iteration 12:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 0.000667946 0.000390955  0.00210536
LC iteration 12, mse (Ct_target-Ct_fit_new) = 134.656 61.0844 223.724

Learning Control (LC) iteration 13:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.00500928 0.000406847     0.10313
LC iteration 13, mse (Ct_target-Ct_fit_new) = 134.692 61.0875 223.113

Learning Control (LC) iteration 14:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.00129307 0.000100872   0.0226906
LC iteration 14, mse (Ct_target-Ct_fit_new) =  134.68 61.0662 222.794

Learning Control (LC) iteration 15:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 0.000585356 9.09589e-05    0.012163
LC iteration 15, mse (Ct_target-Ct_fit_new) = 134.653 61.0501 222.851

Learning Control (LC) iteration 16:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) =  0.00114428 8.55691e-05   0.0193134
LC iteration 16, mse (Ct_target-Ct_fit_new) = 134.642 61.0502 223.061

Learning Control (LC) iteration 17:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 3.88854e-05 1.40021e-05 5.42276e-05
LC iteration 17, mse (Ct_target-Ct_fit_new) = 134.643 61.0577 223.046

Learning Control (LC) iteration 18:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 0.000325667 2.79805e-05  0.00609208
LC iteration 18, mse (Ct_target-Ct_fit_new) = 134.645 61.0606 222.908

Learning Control (LC) iteration 19:
Building Feature Matrix ...
Done
Performing Moore-Penrose Inverse ...
Done
mse (Ct_actual-Ct_fit_old) = 9.64688e-05 7.80806e-06  0.00137287
LC iteration 19, mse (Ct_target-Ct_fit_new) =  134.64 61.0567 222.838

Learning Obstacle Avoidance Coupling Term is Done.
Evaluating LOA Performance on Demo Setting #1/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
Evaluating LOA Performance on Demo Setting #2/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
Evaluating LOA Performance on Demo Setting #3/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
Evaluating LOA Performance on Demo Setting #4/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
Evaluating LOA Performance on Demo Setting #5/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
Evaluating LOA Performance on Demo Setting #6/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
Evaluating LOA Performance on Demo Setting #7/7 ...
Ideal Case (using TRAINING trajectory to compute features) ...
Real Case (using TEST trajectory to compute features) ...
